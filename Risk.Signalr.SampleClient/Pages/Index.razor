@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging;
@inject ILoggerProvider LoggerProvider
@inject PlayerLogic playerLogic

<h5>Welcome Player: @playerLogic.MyPlayerName</h5>
<div>
    <span>Input:</span><input type="text" @bind="userInput" /><br />
    <button @onclick="Signup">Signup</button>
    <br/>
    <input type="text" @bind="secretCode" />
    <button @onclick="StartGame">Start Game</button>
    <br/>
    <button @onclick="GameStatus">Get Status</button>
</div>

<h5>List of Messages</h5>
<ul>
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<textarea @bind="logMessages"></textarea>


@code{
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private string logMessages;
    private string secretCode = "banana55";


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/riskhub")
            .ConfigureLogging(logBuilder =>
            {
                //logBuilder.AddSimpleConsole();
                logBuilder.AddDebug();
            })
            .Build();
        hubConnection.On<string, string>(MessageTypes.SendMessage, (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });
        hubConnection.On<IEnumerable<BoardTerritory>>(MessageTypes.YourTurnToDeploy, (board) =>
        {
            var deployLocation = playerLogic.WhereDoYouWantToDeploy(board);
            Deploy(deployLocation);
        });
        hubConnection.On<GameStatus>(MessageTypes.SendStatus, status =>
        {
            logMessages = status.ToString();
        });

        await hubConnection.StartAsync();
        logMessages += "My connection id is " + hubConnection.ConnectionId;
    }

    async Task Send() => await hubConnection.SendAsync(MessageTypes.SendMessage, userInput, messageInput);
    async Task Signup() => await hubConnection.SendAsync(MessageTypes.Signup, userInput);
    async Task GameStatus() => await hubConnection.SendAsync(MessageTypes.GetStatus);
    async Task StartGame() => await hubConnection.SendAsync(MessageTypes.StartGame, secretCode);
    async Task Deploy(Location desiredLocation) => await hubConnection.SendAsync(MessageTypes.DeployRequest, desiredLocation);
    async Task Attack(Location to, Location from) => await hubConnection.SendAsync(MessageTypes.AttackRequest, to, from);



}
