@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging;
@inject ILoggerProvider LoggerProvider

<div>
    <span>Input:</span><input type="text" @bind="userInput" /><br />
    <button @onclick="SignupAsync">Signup</button>
    <br />
    <input type="text" @bind="secretCode" />
    <button @onclick="StartGameAsync">Start Game</button>
    <br />
    <button @onclick="GameStatusAsync">Get Status</button>
</div>

<h5>List of Messages</h5>
<ul>
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<textarea @bind="logMessages"></textarea>
@if (Status != null)
{
    <div class="playerStats">
        <h5>@Status.GameState</h5>
        <table cellpadding="2px, 10px">
            <thead>
                <tr>
                    <th>Player Name</th>
                    <th>Territories</th>
                    <th>Armies</th>
                    <th>Score</th>
                </tr>
            </thead>
            @foreach (var p in Status.PlayerStats.OrderByDescending(p => p.Score))
            {
                <tr>
                    <td>@p.Name</td>
                    <td>@p.Territories</td>
                    <td>@p.Armies</td>
                    <td>@p.Score</td>
                </tr>
            }
        </table>
    </div>
}




@code{
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private string logMessages;
    private string secretCode = "banana55";
    private GameStatus Status;
    private PlayerLogic playerLogic;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/riskhub")
            .ConfigureLogging(logBuilder =>
            {
                    //logBuilder.AddSimpleConsole();
                    logBuilder.AddDebug();
            })
            .Build();
        hubConnection.On<string, string>(MessageTypes.SendMessage, (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });
        hubConnection.On<IEnumerable<BoardTerritory>>(MessageTypes.YourTurnToDeploy, async (board) =>
        {
            var deployLocation = playerLogic.WhereDoYouWantToDeploy(board);
            await DeployAsync(deployLocation);
        });
        hubConnection.On<GameStatus>(MessageTypes.SendStatus, status =>
        {
            Status = status;
            StateHasChanged();
        });
        hubConnection.On<IEnumerable<BoardTerritory>>(MessageTypes.YourTurnToAttack, async (board) =>
        {
            try
            {
                (var from, var to) = playerLogic.WhereDoYouWantToAttack(board);
                await AttackAsync(from, to);
            }
            catch
            {
                await AttackCompleteAsync();
            }

        });

        await hubConnection.StartAsync();
        logMessages += "My connection id is " + hubConnection.ConnectionId;
    }

    async Task SendAsync() => await hubConnection.SendAsync(MessageTypes.SendMessage, userInput, messageInput);
    async Task SignupAsync()
    {
        await hubConnection.SendAsync(MessageTypes.Signup, userInput);
        playerLogic = new PlayerLogic(userInput);
    }
    async Task GameStatusAsync() => await hubConnection.SendAsync(MessageTypes.GetStatus);
    async Task StartGameAsync() => await hubConnection.SendAsync(MessageTypes.StartGame, secretCode);
    async Task DeployAsync(Location desiredLocation) => await hubConnection.SendAsync(MessageTypes.DeployRequest, desiredLocation);
    async Task AttackAsync(Location from, Location to) => await hubConnection.SendAsync(MessageTypes.AttackRequest, from, to);
    async Task AttackCompleteAsync() => await hubConnection.SendAsync(MessageTypes.AttackComplete);



}
